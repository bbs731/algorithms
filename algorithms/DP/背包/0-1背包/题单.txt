0-1 背包 (n 个物品，背包容量为 maxW)   0-1 Knapsack
视频讲解：https://www.bilibili.com/video/BV16Y411v7Y6/
状态：从前 i 个物品中选择若干个，当容量限制为 j 时能获得的最大价值和  i∈[0,n-1], j∈[0,maxW]
初始值：f(0,j)=0  j∈[0,maxW]
除开初始状态，每个状态有两个来源，决策为 max：
- 不选第 i 个物品：f(i-1,j) -> f(i,j)
- 选第 i 个物品：f(i-1,j-wi)+vi -> f(i,j)   j≥wi
最优解为 f(n-1,maxW)
https://oi-wiki.org/dp/knapsack/
关于「超大背包问题」见 search.go

模板题 https://www.luogu.com.cn/problem/P1048 https://atcoder.jp/contests/dp/tasks/dp_d
恰好装满 LC2915 https://leetcode.cn/problems/length-of-the-longest-subsequence-that-sums-to-target/
LC2787 https://leetcode.cn/problems/ways-to-express-an-integer-as-sum-of-powers/
LC2291 https://leetcode.cn/problems/maximum-profit-from-trading-stocks/
转换 LC494 https://leetcode.cn/problems/target-sum/
           https://atcoder.jp/contests/abc274/tasks/abc274_d
转换 LC1049 https://leetcode.cn/problems/last-stone-weight-ii/
LC2431 https://leetcode.cn/problems/maximize-total-tastiness-of-purchased-fruits/